import boto3
from botocore.exceptions import ClientError as BotocoreClientError
from python_on_whales.exceptions import DockerException
from rigel.clients import DockerClient
from rigel.exceptions import ClientError, DockerAPIError, RigelError
from rigel.loggers import get_logger
from rigel.models.builder import ModelBuilder
from rigel.models.provider import ProviderRawData
from rigel.models.rigelfile import RigelfileGlobalData
from rigel.providers import Provider
from typing import Any, Dict
from .models import AWSProviderModel, AWSProviderOutputModel


LOGGER = get_logger()


class AWSProvider(Provider):

    """
    Provides connectivity to AWS services such as ECR and RoboMaker for a Rigel
    file. It initializes with model data, logs into ECR servers, and connects/disconnects
    from RoboMaker based on service declarations.

    Attributes:
        model (AWSProviderModel): Initialized during the object's initialization
            process. It represents a model specific to AWS providers and contains
            data related to services such as ECR and Robomaker.
        raw_data (ProviderRawData): Passed to the parent class's constructor
            (`super().__init__`). Its purpose is not explicitly defined in this
            snippet, but it likely contains raw data specific to the AWS provider.
        __docker (DockerClient): Initialized as an instance of the DockerClient
            class when the `AWSProvider` object is created. It provides methods
            to interact with Docker services, specifically login and logout for
            ECR (Elastic Container Registry).
        __raw_output_model (Dict[str,Any]): Initialized as an empty dictionary in
            the constructor. It stores raw output data generated by AWS services
            during the connection process.

    """
    def __init__(
        self,
        identifier: str,
        raw_data: ProviderRawData,
        global_data: RigelfileGlobalData,
        providers_data: Dict[str, Any]
    ) -> None:
        """
        Initializes an instance of the class with four parameters: identifier,
        raw_data, global_data, and providers_data. It also builds an AWS provider
        model and sets up a Docker client for further use.

        Args:
            identifier (str): Expected to be an identifier or name for this instance.
            raw_data (ProviderRawData): Expected to be an instance of that class
                or any other object compatible with it. It represents raw data
                related to providers, which may include various provider-specific
                attributes or parameters.
            global_data (RigelfileGlobalData): Expected to be passed as an argument
                when initializing an instance of this class.
            providers_data (Dict[str, Any]): Expected to be passed with dictionary
                values that map string keys to any type (Any) of data.

        """
        super().__init__(
            identifier,
            raw_data,
            global_data,
            providers_data
        )

        # Ensure model instance was properly initialized
        self.model = ModelBuilder(AWSProviderModel).build([], self.raw_data)
        assert isinstance(self.model, AWSProviderModel)

        self.__docker: DockerClient = DockerClient()
        self.__raw_output_model: Dict[str, Any] = {}

    def connect(self) -> None:
        """
        Connects to various AWS services and builds an output model based on the
        connected services, raising an error if an unsupported service is encountered.

        """
        for service in self.model.services:
            if service == 'ecr':
                self.connect_ecr()
            elif service == 'robomaker':
                self.connect_robomaker()
            else:
                raise RigelError(base=f"Unable to connect. Service '{service}' is invalid or not supported.")
        self.providers_data[self.identifier] = ModelBuilder(AWSProviderOutputModel).build([], self.__raw_output_model)

    def disconnect(self) -> None:
        """
        Iterates over the services listed in self.model.services, disconnecting
        ECR and Robomaker services specifically, and raises an error for unsupported
        or invalid services.

        """
        for service in self.model.services:
            if service == 'ecr':
                self.disconnect_ecr()
            elif service == 'robomaker':
                self.disconnect_robomaker()
            else:
                raise RigelError(base=f"Unable to disconnect. Service '{service}' is invalid or not supported.")
        # del self.providers_data[self.identifier]

    #
    # ELASTIC CONTAINER REGISTRY (ECR)
    #

    def connect_ecr(self) -> None:

        """
        Logs into Amazon Elastic Container Registry (ECR) servers declared by the
        model instance, attempting login for each server and raising an exception
        if any error occurs during the process.

        """
        if not self.model.ecr_servers:
            raise Exception("No ECR server was declared while using the 'ecr' service")

        try:
            for server in self.model.ecr_servers:
                LOGGER.debug(f"Attempting login with ECR '{server}'")
                self.__docker.login_ecr(
                    aws_access_key_id=self.model.aws_access_key_id,
                    aws_secret_access_key=self.model.aws_secret_access_key,
                    region_name=self.model.region_name,
                    registry=server
                )
                LOGGER.info(f"Logged in with success to ECR '{server}'")
        except DockerException as exception:
            raise DockerAPIError(exception)

    def disconnect_ecr(self) -> None:

        """
        Logs out from all ECR servers associated with the model. It iterates over
        each server, attempts to log out using Docker's logout function, and handles
        any exceptions that may occur during the process.

        """
        servers = self.model.ecr_servers

        try:
            for server in servers:
                self.__docker.logout(server)
        except DockerException as exception:
            raise DockerAPIError(exception)

        LOGGER.info(f"Logged out with success from registry '{server}'")

    #
    # ROBOMAKER
    #

    def connect_robomaker(self) -> None:

        """
        Authenticates with AWS RoboMaker using provided AWS access key ID, secret
        access key, and region name, then establishes an API client connection.
        If authentication fails, it raises a ClientError.

        """
        try:

            # Obtain Robomaker authentication token
            robomaker_client = boto3.client(
                'robomaker',
                aws_access_key_id=self.model.aws_access_key_id,
                aws_secret_access_key=self.model.aws_secret_access_key,
                region_name=self.model.region_name
            )

        except BotocoreClientError as err:
            raise ClientError('AWS', err)

        LOGGER.debug('Authenticated with AWS RoboMaker.')

        self.__raw_output_model['robomaker_client'] = robomaker_client

    def disconnect_robomaker(self) -> None:
        pass  # do nothing
