import os
import random
import string
from rigel.clients import DockerClient
from rigel.exceptions import RigelError, UndeclaredEnvironmentVariableError
from rigel.loggers import get_logger
from rigel.models.application import Application
from rigel.models.builder import ModelBuilder
from rigel.models.plugin import PluginRawData
from rigel.models.rigelfile import RigelfileGlobalData
from rigel.plugins import Plugin as PluginBase
from rigel.providers.core import SSHProviderOutputModel
from typing import Any, Dict, List
from .models import PluginModel


LOGGER = get_logger()


class Plugin(PluginBase):

    """
    Handles the setup and execution of a Docker build process for a specific image,
    using plugins, global data, and application settings. It configures QEMU,
    creates/builds/removes a Docker builder, generates SSH keys, and exports
    environment variables to the build context.

    Attributes:
        model (PluginModel): Initialized with the result of calling the `build`
            method of a `ModelBuilder` instance with `PluginModel` as its model
            type and `self.raw_data` as an argument.
        raw_data (PluginRawData): Passed to the constructor as part of the parent
            class's initialization. Its purpose and content are not explicitly
            stated in this code snippet.
        __docker (DockerClient): Initialized in the constructor. It represents a
            Docker client object that can be used to interact with Docker containers,
            such as running, creating, or removing them.
        __builder_id (str): Generated by the `_builder_id_generator` method, which
            randomly generates a string of a specified size using uppercase letters
            and digits.
        __builder_id_generator (Callable[[],str]): Used to generate a unique builder
            ID for Docker builds. It uses random characters to create a string
            with a specified length, which can be adjusted through the `size` parameter.

    """
    def __init__(
        self,
        raw_data: PluginRawData,
        global_data: RigelfileGlobalData,
        application: Application,
        providers_data: Dict[str, Any],
        shared_data: Dict[str, Any] = {}  # noqa
    ) -> None:
        """
        Initializes an instance with raw data, global data, application, providers
        data and shared data. It also builds a model using ModelBuilder and
        initializes DockerClient, setting a unique builder ID.

        Args:
            raw_data (PluginRawData): Passed to the constructor as an argument.
            global_data (RigelfileGlobalData): Likely used to store global data
                for the plugin that is specific to RigelFile. Its exact purpose
                depends on the context in which it is being used.
            application (Application): Required for the initialization of the
                object. Its role is not explicitly defined in this code snippet,
                but it likely represents the main application or software being
                used with the plugin.
            providers_data (Dict[str, Any]): Initialized with an empty dictionary.
                It seems to be used to store data provided by some unknown sources
                (probably external services or APIs) for use within the class.
            shared_data (Dict[str, Any]): Optional with default value `{}`. This
                implies that the caller of this function can optionally provide
                an additional dictionary of data to be shared among different parts
                of the code.

        """
        super().__init__(
            raw_data,
            global_data,
            application,
            providers_data,
            shared_data
        )

        # Ensure model instance was properly initialized
        self.model = ModelBuilder(PluginModel).build([], self.raw_data)
        assert isinstance(self.model, PluginModel)

        self.__docker: DockerClient = DockerClient()
        self.__builder_id = f"rigel-builder-{self.__builder_id_generator()}"

    # Extracted and adapted from:
    # https://stackoverflow.com/questions/2257441/random-string-generation-with-upper-case-letters-and-digits
    def __builder_id_generator(self, size=16, chars=string.ascii_uppercase + string.digits) -> str:
        return ''.join(random.choice(chars) for _ in range(size))

    def configure_qemu(self) -> None:
        """
        Attempts to run a Docker container with the qus image, specifying privileged
        mode and removal upon completion. If an exception occurs, it is caught and
        ignored, and an informational log message is recorded regardless of success
        or failure.

        """

        try:
            self.__docker.run_container(
                'qus',
                'aptman/qus',
                command=['-s -- -c -p'],
                privileged=True,
                remove=True,
            )
        except Exception:
            # LOGGER.error('Ignoring error')
            pass  # TODO: improve QEMU configuration mechanism

        LOGGER.info("QEMU configuration files were created.")

    def delete_qemu_files(self) -> None:
        """
        Attempts to run a Docker container with the 'qus' image, executes the
        'aptman/qus' command with the '-- -r' flag, and removes the container upon
        completion. If any exception occurs, it is caught and ignored.

        """

        try:
            self.__docker.run_container(
                'qus',
                'aptman/qus',
                command=['-- -r'],
                privileged=True,
                remove=True,
            )
        except Exception:
            # LOGGER.error('Ignoring error')
            pass  # TODO: improve QEMU removal mechanism

        LOGGER.info("QEMU configuration files were delete.")

    def create_builder(self) -> None:
        """
        Creates a new Docker builder with the specified ID and sets its use to
        True, then logs an informational message indicating that the builder has
        been created.

        """
        self.__docker.create_builder(self.__builder_id, use=True)
        LOGGER.info(f"Create builder '{self.__builder_id}'.")

    def remove_builder(self) -> None:
        """
        Removes a specified builder from Docker and logs an informational message
        stating the removal of the builder with the provided ID.

        """
        self.__docker.remove_builder(self.__builder_id)
        LOGGER.info(f"Removed builder '{self.__builder_id}'.")

    def get_ssh_keys(self) -> None:
        """
        Retrieves SSH keys from a list of provider data, filtering out keys without
        an environment association and returning them as a list.

        Returns:
            List[SSHKey]: A list of SSH keys that are associated with an environment.
            It collects these keys from SSHProviderOutputModel instances within providers_data.

        """
        ssh_keys = []
        for _, model in self.providers_data.items():
            if isinstance(model, SSHProviderOutputModel):
                for key in model.keys:
                    if key.env:
                        ssh_keys.append(key)
        return ssh_keys

    def prepare_image_name(self) -> List[str]:

        """
        Extracts image name and tags from self.model, adds or removes 'latest' tag
        based on self.model.force_tag_latest, and generates valid image names by
        combining original name with available tags.

        Returns:
            List[str]: A list of strings representing valid image names with
            specified tags, based on the input model and its properties.

        """
        name_parts = self.model.image.rsplit(':', 1)
        if not name_parts or '' in name_parts:
            raise RigelError(base=f"Invalid image name was provided '{self.model.image}'")

        tags = set(self.model.tags)

        # Ensure 'latest' tag is always present when required
        if 'latest' not in tags and self.model.force_tag_latest:
            tags.add('latest')
        if 'latest' in tags and not self.model.force_tag_latest:
            tags.remove('latest')

        if len(name_parts) > 1:  # a tag was declared alongside the image name

            LOGGER.debug("Consider using the field 'tags' to define desired image tags")
            tag = name_parts[-1]
            if tag not in tags:
                tags.add(tag)
            return [f"{''.join(name_parts[:-1])}:{_tag}" for _tag in list(tags)]

        else:  # no tag was declared alongside the image name

            if not self.model.force_tag_latest:
                raise RigelError(base=f"Image name '{self.model.image}' was declared without a tag")
            return [f"{name_parts[0]}:{_tag}" for _tag in list(tags)]

    def setup(self) -> None:  # noqa
        # self.delete_qemu_files()
        self.configure_qemu()
        self.create_builder()

    def export_keys(self, buildargs: Dict[str, Any]) -> None:
        """
        Iterates over SSH keys, checks if each key has an environment variable
        associated with it, and updates the build arguments with the corresponding
        environment variables' values. If a key's environment variable is undeclared,
        it raises an error.

        Args:
            buildargs (Dict[str, Any]): Expected to be an environment variable
                dictionary. It represents a collection of key-value pairs where
                keys are strings and values can be any Python object.

        """
        try:
            for key in self.get_ssh_keys():
                if key.env:
                    buildargs[key.env] = os.environ[key.env]
        except KeyError:
            raise UndeclaredEnvironmentVariableError(env=key.env)

    def start(self) -> None:

        """
        Builds Docker images using specified build arguments and tags. If the
        `push` or `load` attributes are set, it pushes or loads the built image
        accordingly, logging success messages for each tag. It handles errors by
        logging them.

        """
        LOGGER.info(f"Building Docker image '{self.model.image}'.")

        complete_buildargs = self.model.buildargs.copy()
        self.export_keys(complete_buildargs)

        tags = self.prepare_image_name()

        try:
            kwargs = {
                "build_args": complete_buildargs,
                "cache": True,
                "file": f'{self.application.dir}/Dockerfile',
                "load": self.model.load,
                "push": self.model.push,
                "tags": tags
            }

            if self.model.platforms:
                kwargs["platforms"] = self.model.platforms

            self.__docker.build(self.application.dir, **kwargs)

            if self.model.push:
                LOGGER.info("The following Docker images were built and pushed with success:")
                for tag in tags:
                    print(f'- {tag}')

            elif self.model.load:
                LOGGER.info("The following Docker images were built with success:")
                for tag in tags:
                    print(f'- {tag}')

        except RigelError as err:
            LOGGER.error(err)

    def stop(self) -> None:
        """
        Deletes QEMU files and removes a builder, indicating that the plugin has
        been stopped or terminated. This method provides a mechanism to clean up
        resources allocated by the plugin when it is no longer needed.

        """
        self.delete_qemu_files()
        self.remove_builder()
